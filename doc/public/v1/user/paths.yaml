/api/v1/user:
  post:
    tags:
      - User
    summary: Create User
    operationId: postUser
    security:
      - bearerAuth: [ ]
    style: simple
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                required: true
                description: User name
                example: 'Fernando'
              lastName:
                type: string
                required: true
                description: User name
                example: 'Herrera'
              email:
                type: string
                required: true
                description: User email
                example: 'fernando@api.com'
              password:
                type: string
                required: true
                description: User Password
                example: '123456'
              role:
                type: string
                enum:
                  - ROLE_ADMIN
                required: true
                description: User Password
                example: 'ROLE_ADMIN'
    responses:
      '201':
        description: Successful operation
      '404':
        $ref: "#/components/responses/ResourceNotFound"
      '409':
        $ref: "#/components/responses/ConflictException"
      '500':
        $ref: "#/components/responses/InternalError"

  get:
    tags:
      - User
    summary: Search Users
    operationId: searchUsers
    security:
      - bearerAuth: [ ]
    style: simple
    parameters:
      - $ref: '#/components/parameters/SearchOrderByParam'
      - $ref: '#/components/parameters/SearchOrderDirectionParam'
      - $ref: '#/components/parameters/SearchPageSizeParam'
      - $ref: '#/components/parameters/SearchCurrentPageParam'
      - name: filterByUuid
        in: query
        required: false
        schema:
          type: string
        description: Filter by User Public Uuid
      - name: filterByEmail
        in: query
        required: false
        schema:
          type: string
        description: Filter by User Email
      - name: filterByIsActive
        in: query
        required: false
        schema:
          type: boolean
        description: Filter By User Is Active
    responses:
      '200':
        description: Successful operation
        content:
          application/json:
            schema:
              type: object
              required:
                - code
                - data
              properties:
                code:
                  type: integer
                  example: 200
                  description: Success code = 200
                data:
                  $ref: "#/components/schemas/user/UsersSearchView"

      '404':
        $ref: "#/components/responses/ResourceNotFound"
      '409':
        $ref: "#/components/responses/ConflictException"
      '500':
        $ref: "#/components/responses/InternalError"

/api/v1/user/{uuid}:
  get:
    tags:
      - User
    summary: Get User by Uuid
    operationId: getUser
    security:
      - bearerAuth: []
    style: simple
    parameters:
      - in: path
        name: uuid
        schema:
          type: string
          example: "9f285960-f482-4f1b-9c88-549a1b4"
          description: UserId
        required: true
    responses:
      '200':
        description: Successful operation
        content:
          application/json:
            schema:
              type: object
              required:
                - user
              properties:
                user:
                  $ref: "#/components/schemas/user/UserEntity"
      '404':
        $ref: "#/components/responses/ResourceNotFound"
      '409':
        $ref: "#/components/responses/ConflictException"
      '500':
        $ref: "#/components/responses/InternalError"
  put:
    tags:
      - User
    summary: Update User
    operationId: putUser
    security:
      - bearerAuth: [ ]
    parameters:
      - in: path
        name: uuid
        schema:
          type: string
          example: "9f285960-f482-4f1b-9c88-549a1b4"
          description: UserPublicId
        required: true
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                required: false
                description: User name
                example: 'Cesa'
              lastname:
                type: string
                required: false
                description: User lastname
                example: 'Iniesta'
              email:
                type: string
                required: false
                description: User email
                example: 'cesar@iniesta.com'
              role:
                type: string
                enum:
                  - ROLE_ADMIN
                required: false
                description: User Role
                example: 'ROLE_ADMIN'
              isActive:
                type: boolean
                required: false
                description: If user is account is active
                example: false

    style: simple
    responses:
      '200':
        description: Successful operation
      '404':
        $ref: "#/components/responses/ResourceNotFound"
      '409':
        $ref: "#/components/responses/ConflictException"
      '500':
        $ref: "#/components/responses/InternalError"

/api/v1/user/{uuid}/avatar:
  post:
    tags:
      - User
    summary: Upload UserAvatar
    operationId: postUploadUserAvatar
    security:
      - bearerAuth: [ ]
    parameters:
      - in: path
        name: uuid
        schema:
          type: string
          example: "9f285960-f482-4f1b-9c88-549a1b4"
          description: User public Uuid
        required: true
    requestBody:
      content:
        mulitparm/form-data:
          schema:
            type: object
            properties:
              avatar:
                type: string
                format: binary
                required: true
    style: simple
    responses:
      '200':
        description: Successful operation
        content:
          application/json:
            schema:
              type: object
              required:
                - avatarResource
              properties:
                avatarResource:
                  type: string
                  example: "avatar/dfjkdhskj43324k$jdkfkds.png"
      '404':
        $ref: "#/components/responses/ResourceNotFound"
        '409':
          $ref: "#/components/responses/ConflictException"
        '500':
          $ref: "#/components/responses/InternalError"
